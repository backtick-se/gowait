syntax = "proto3";
import "google/protobuf/timestamp.proto";

option go_package = "cowait/adapter/api/grpc/pb";

service Executor {
    rpc ExecInit(ExecInitReq) returns (ExecInitReply) {}
    rpc ExecAquire(ExecAquireReq) returns (ExecAquireReply) {}
    rpc ExecStop(ExecStopReq) returns (ExecStopReply) {}

    rpc TaskInit(TaskInitReq) returns (TaskInitReply) {}
    rpc TaskFailure(TaskFailureReq) returns (TaskFailureReply) {}
    rpc TaskComplete(TaskCompleteReq) returns (TaskCompleteReply) {}
    rpc TaskLog(stream LogEntry) returns (LogSummary) {}
}

message Header {
    string id = 1;
    google.protobuf.Timestamp time = 3;
}

//
// Executor API
//

message ExecInitReq {
    Header header = 1;
    string version = 2;
    string image = 3;
    repeated TaskSpec specs = 4;
}

message ExecInitReply { }

message ExecAquireReq {
    Header header = 1;
}

message ExecAquireReply {
    string id = 1;
    Task next = 2;
}

message ExecStopReq {
    Header header = 1;
}

message ExecStopReply { }

//
// Task API
//

message TaskInitReq {
    Header header = 1;
    string version = 2;
    string executor = 3;
}

message TaskInitReply { }

message TaskFailureReq {
    Header header = 1;
    string error = 2;
}

message TaskFailureReply { }

message TaskCompleteReq {
    Header header = 1;
    string result = 2;
}

message TaskCompleteReply { }

message LogEntry {
    Header header = 1;
    string file = 2;
    string data = 3;
}

message LogSummary {
    int64 records = 1;
}

// Api Service

service Cowait {
    rpc CreateTask(CreateTaskReq) returns (CreateTaskReply) {}
    rpc QueryTasks(QueryTasksReq) returns (QueryTasksReply) {}
    rpc KillTask(KillTaskReq) returns (KillTaskReply) {}
    rpc AwaitTask(AwaitTaskReq) returns (stream AwaitTaskReply) {}
}

message Task {
    string task_id = 1;
    string parent = 2;
    string status = 3;
    TaskSpec spec = 4;
    google.protobuf.Timestamp scheduled = 5;
    google.protobuf.Timestamp started = 6;
    google.protobuf.Timestamp completed = 7;
    string result = 8;
    string error = 9;
}

message TaskSpec {
    string image = 1;
    string name = 2;
    repeated string command = 3;
    string input = 4;
    int64 timeout = 5;
    google.protobuf.Timestamp time = 6;
}

message CreateTaskReq { 
    TaskSpec spec = 1;
}

message CreateTaskReply {
    Task task = 1;
}

message QueryTasksReq { 
    string id = 1;
}
message QueryTasksReply { 
    repeated Task tasks = 1;
}

message KillTaskReq { 
    string id = 1;
}
message KillTaskReply { }

message AwaitTaskReq {
    string id = 1;
}

message AwaitTaskReply {
    Task task = 1;
}

//
// Cluster Uplink
//

service Cluster {
    rpc Info(ClusterInfoReq) returns (ClusterInfoReply) {}
    rpc CreateTask(CreateTaskReq) returns (CreateTaskReply) {}
    rpc KillTask(KillTaskReq) returns (KillTaskReply) {}
    
    rpc Subscribe(ClusterSubscribeReq) returns (stream ClusterEvent) {}
}

message ClusterInfoReq {}
message ClusterInfoReply {
    string cluster_id = 1;
    string name = 2;
    string key = 3;
    string status = 4;
}

message ClusterPokeReq {}
message ClusterPokeReply {}

message ClusterSubscribeReq {}
message ClusterEvent {
    string cluster_id = 1;
    string type = 2;
    Task task = 3;
}
