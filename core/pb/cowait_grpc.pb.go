// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: core/pb/cowait.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	TaskInit(ctx context.Context, in *TaskInitReq, opts ...grpc.CallOption) (*TaskInitReply, error)
	TaskStatus(ctx context.Context, in *TaskStatusReq, opts ...grpc.CallOption) (*TaskStatusReply, error)
	TaskFailure(ctx context.Context, in *TaskFailureReq, opts ...grpc.CallOption) (*TaskFailureReply, error)
	TaskComplete(ctx context.Context, in *TaskCompleteReq, opts ...grpc.CallOption) (*TaskCompleteReply, error)
	TaskLog(ctx context.Context, opts ...grpc.CallOption) (Task_TaskLogClient, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) TaskInit(ctx context.Context, in *TaskInitReq, opts ...grpc.CallOption) (*TaskInitReply, error) {
	out := new(TaskInitReply)
	err := c.cc.Invoke(ctx, "/Task/TaskInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskStatus(ctx context.Context, in *TaskStatusReq, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := c.cc.Invoke(ctx, "/Task/TaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskFailure(ctx context.Context, in *TaskFailureReq, opts ...grpc.CallOption) (*TaskFailureReply, error) {
	out := new(TaskFailureReply)
	err := c.cc.Invoke(ctx, "/Task/TaskFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskComplete(ctx context.Context, in *TaskCompleteReq, opts ...grpc.CallOption) (*TaskCompleteReply, error) {
	out := new(TaskCompleteReply)
	err := c.cc.Invoke(ctx, "/Task/TaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskLog(ctx context.Context, opts ...grpc.CallOption) (Task_TaskLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Task_ServiceDesc.Streams[0], "/Task/TaskLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskTaskLogClient{stream}
	return x, nil
}

type Task_TaskLogClient interface {
	Send(*LogEntry) error
	CloseAndRecv() (*LogSummary, error)
	grpc.ClientStream
}

type taskTaskLogClient struct {
	grpc.ClientStream
}

func (x *taskTaskLogClient) Send(m *LogEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskTaskLogClient) CloseAndRecv() (*LogSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	TaskInit(context.Context, *TaskInitReq) (*TaskInitReply, error)
	TaskStatus(context.Context, *TaskStatusReq) (*TaskStatusReply, error)
	TaskFailure(context.Context, *TaskFailureReq) (*TaskFailureReply, error)
	TaskComplete(context.Context, *TaskCompleteReq) (*TaskCompleteReply, error)
	TaskLog(Task_TaskLogServer) error
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) TaskInit(context.Context, *TaskInitReq) (*TaskInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInit not implemented")
}
func (UnimplementedTaskServer) TaskStatus(context.Context, *TaskStatusReq) (*TaskStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStatus not implemented")
}
func (UnimplementedTaskServer) TaskFailure(context.Context, *TaskFailureReq) (*TaskFailureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFailure not implemented")
}
func (UnimplementedTaskServer) TaskComplete(context.Context, *TaskCompleteReq) (*TaskCompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskComplete not implemented")
}
func (UnimplementedTaskServer) TaskLog(Task_TaskLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskLog not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_TaskInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/TaskInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskInit(ctx, req.(*TaskInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskStatus(ctx, req.(*TaskStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFailureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/TaskFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskFailure(ctx, req.(*TaskFailureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Task/TaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskComplete(ctx, req.(*TaskCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServer).TaskLog(&taskTaskLogServer{stream})
}

type Task_TaskLogServer interface {
	SendAndClose(*LogSummary) error
	Recv() (*LogEntry, error)
	grpc.ServerStream
}

type taskTaskLogServer struct {
	grpc.ServerStream
}

func (x *taskTaskLogServer) SendAndClose(m *LogSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskTaskLogServer) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskInit",
			Handler:    _Task_TaskInit_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Task_TaskStatus_Handler,
		},
		{
			MethodName: "TaskFailure",
			Handler:    _Task_TaskFailure_Handler,
		},
		{
			MethodName: "TaskComplete",
			Handler:    _Task_TaskComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskLog",
			Handler:       _Task_TaskLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "core/pb/cowait.proto",
}
