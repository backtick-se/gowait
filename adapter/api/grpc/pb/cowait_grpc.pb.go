// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protobuf/cowait.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorClient interface {
	TaskInit(ctx context.Context, in *TaskInitReq, opts ...grpc.CallOption) (*TaskInitReply, error)
	TaskFailure(ctx context.Context, in *TaskFailureReq, opts ...grpc.CallOption) (*TaskFailureReply, error)
	TaskComplete(ctx context.Context, in *TaskCompleteReq, opts ...grpc.CallOption) (*TaskCompleteReply, error)
	TaskLog(ctx context.Context, opts ...grpc.CallOption) (Executor_TaskLogClient, error)
}

type executorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorClient(cc grpc.ClientConnInterface) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) TaskInit(ctx context.Context, in *TaskInitReq, opts ...grpc.CallOption) (*TaskInitReply, error) {
	out := new(TaskInitReply)
	err := c.cc.Invoke(ctx, "/Executor/TaskInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) TaskFailure(ctx context.Context, in *TaskFailureReq, opts ...grpc.CallOption) (*TaskFailureReply, error) {
	out := new(TaskFailureReply)
	err := c.cc.Invoke(ctx, "/Executor/TaskFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) TaskComplete(ctx context.Context, in *TaskCompleteReq, opts ...grpc.CallOption) (*TaskCompleteReply, error) {
	out := new(TaskCompleteReply)
	err := c.cc.Invoke(ctx, "/Executor/TaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) TaskLog(ctx context.Context, opts ...grpc.CallOption) (Executor_TaskLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[0], "/Executor/TaskLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorTaskLogClient{stream}
	return x, nil
}

type Executor_TaskLogClient interface {
	Send(*LogEntry) error
	CloseAndRecv() (*LogSummary, error)
	grpc.ClientStream
}

type executorTaskLogClient struct {
	grpc.ClientStream
}

func (x *executorTaskLogClient) Send(m *LogEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorTaskLogClient) CloseAndRecv() (*LogSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorServer is the server API for Executor service.
// All implementations must embed UnimplementedExecutorServer
// for forward compatibility
type ExecutorServer interface {
	TaskInit(context.Context, *TaskInitReq) (*TaskInitReply, error)
	TaskFailure(context.Context, *TaskFailureReq) (*TaskFailureReply, error)
	TaskComplete(context.Context, *TaskCompleteReq) (*TaskCompleteReply, error)
	TaskLog(Executor_TaskLogServer) error
	mustEmbedUnimplementedExecutorServer()
}

// UnimplementedExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (UnimplementedExecutorServer) TaskInit(context.Context, *TaskInitReq) (*TaskInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInit not implemented")
}
func (UnimplementedExecutorServer) TaskFailure(context.Context, *TaskFailureReq) (*TaskFailureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFailure not implemented")
}
func (UnimplementedExecutorServer) TaskComplete(context.Context, *TaskCompleteReq) (*TaskCompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskComplete not implemented")
}
func (UnimplementedExecutorServer) TaskLog(Executor_TaskLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskLog not implemented")
}
func (UnimplementedExecutorServer) mustEmbedUnimplementedExecutorServer() {}

// UnsafeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServer will
// result in compilation errors.
type UnsafeExecutorServer interface {
	mustEmbedUnimplementedExecutorServer()
}

func RegisterExecutorServer(s grpc.ServiceRegistrar, srv ExecutorServer) {
	s.RegisterService(&Executor_ServiceDesc, srv)
}

func _Executor_TaskInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).TaskInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Executor/TaskInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).TaskInit(ctx, req.(*TaskInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_TaskFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFailureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).TaskFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Executor/TaskFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).TaskFailure(ctx, req.(*TaskFailureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_TaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).TaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Executor/TaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).TaskComplete(ctx, req.(*TaskCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_TaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServer).TaskLog(&executorTaskLogServer{stream})
}

type Executor_TaskLogServer interface {
	SendAndClose(*LogSummary) error
	Recv() (*LogEntry, error)
	grpc.ServerStream
}

type executorTaskLogServer struct {
	grpc.ServerStream
}

func (x *executorTaskLogServer) SendAndClose(m *LogSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorTaskLogServer) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Executor_ServiceDesc is the grpc.ServiceDesc for Executor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Executor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskInit",
			Handler:    _Executor_TaskInit_Handler,
		},
		{
			MethodName: "TaskFailure",
			Handler:    _Executor_TaskFailure_Handler,
		},
		{
			MethodName: "TaskComplete",
			Handler:    _Executor_TaskComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskLog",
			Handler:       _Executor_TaskLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/cowait.proto",
}

// CowaitClient is the client API for Cowait service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CowaitClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskReply, error)
	QueryTasks(ctx context.Context, in *QueryTasksReq, opts ...grpc.CallOption) (*QueryTasksReply, error)
	KillTask(ctx context.Context, in *KillTaskReq, opts ...grpc.CallOption) (*KillTaskReply, error)
	AwaitTask(ctx context.Context, in *AwaitTaskReq, opts ...grpc.CallOption) (Cowait_AwaitTaskClient, error)
}

type cowaitClient struct {
	cc grpc.ClientConnInterface
}

func NewCowaitClient(cc grpc.ClientConnInterface) CowaitClient {
	return &cowaitClient{cc}
}

func (c *cowaitClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, "/Cowait/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cowaitClient) QueryTasks(ctx context.Context, in *QueryTasksReq, opts ...grpc.CallOption) (*QueryTasksReply, error) {
	out := new(QueryTasksReply)
	err := c.cc.Invoke(ctx, "/Cowait/QueryTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cowaitClient) KillTask(ctx context.Context, in *KillTaskReq, opts ...grpc.CallOption) (*KillTaskReply, error) {
	out := new(KillTaskReply)
	err := c.cc.Invoke(ctx, "/Cowait/KillTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cowaitClient) AwaitTask(ctx context.Context, in *AwaitTaskReq, opts ...grpc.CallOption) (Cowait_AwaitTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cowait_ServiceDesc.Streams[0], "/Cowait/AwaitTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &cowaitAwaitTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cowait_AwaitTaskClient interface {
	Recv() (*AwaitTaskReply, error)
	grpc.ClientStream
}

type cowaitAwaitTaskClient struct {
	grpc.ClientStream
}

func (x *cowaitAwaitTaskClient) Recv() (*AwaitTaskReply, error) {
	m := new(AwaitTaskReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CowaitServer is the server API for Cowait service.
// All implementations must embed UnimplementedCowaitServer
// for forward compatibility
type CowaitServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskReply, error)
	QueryTasks(context.Context, *QueryTasksReq) (*QueryTasksReply, error)
	KillTask(context.Context, *KillTaskReq) (*KillTaskReply, error)
	AwaitTask(*AwaitTaskReq, Cowait_AwaitTaskServer) error
	mustEmbedUnimplementedCowaitServer()
}

// UnimplementedCowaitServer must be embedded to have forward compatible implementations.
type UnimplementedCowaitServer struct {
}

func (UnimplementedCowaitServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedCowaitServer) QueryTasks(context.Context, *QueryTasksReq) (*QueryTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTasks not implemented")
}
func (UnimplementedCowaitServer) KillTask(context.Context, *KillTaskReq) (*KillTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTask not implemented")
}
func (UnimplementedCowaitServer) AwaitTask(*AwaitTaskReq, Cowait_AwaitTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method AwaitTask not implemented")
}
func (UnimplementedCowaitServer) mustEmbedUnimplementedCowaitServer() {}

// UnsafeCowaitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CowaitServer will
// result in compilation errors.
type UnsafeCowaitServer interface {
	mustEmbedUnimplementedCowaitServer()
}

func RegisterCowaitServer(s grpc.ServiceRegistrar, srv CowaitServer) {
	s.RegisterService(&Cowait_ServiceDesc, srv)
}

func _Cowait_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CowaitServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cowait/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CowaitServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cowait_QueryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CowaitServer).QueryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cowait/QueryTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CowaitServer).QueryTasks(ctx, req.(*QueryTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cowait_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CowaitServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cowait/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CowaitServer).KillTask(ctx, req.(*KillTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cowait_AwaitTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AwaitTaskReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CowaitServer).AwaitTask(m, &cowaitAwaitTaskServer{stream})
}

type Cowait_AwaitTaskServer interface {
	Send(*AwaitTaskReply) error
	grpc.ServerStream
}

type cowaitAwaitTaskServer struct {
	grpc.ServerStream
}

func (x *cowaitAwaitTaskServer) Send(m *AwaitTaskReply) error {
	return x.ServerStream.SendMsg(m)
}

// Cowait_ServiceDesc is the grpc.ServiceDesc for Cowait service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cowait_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cowait",
	HandlerType: (*CowaitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Cowait_CreateTask_Handler,
		},
		{
			MethodName: "QueryTasks",
			Handler:    _Cowait_QueryTasks_Handler,
		},
		{
			MethodName: "KillTask",
			Handler:    _Cowait_KillTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AwaitTask",
			Handler:       _Cowait_AwaitTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/cowait.proto",
}

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	Info(ctx context.Context, in *ClusterInfoReq, opts ...grpc.CallOption) (*ClusterInfoReply, error)
	Spawn(ctx context.Context, in *ClusterSpawnReq, opts ...grpc.CallOption) (*ClusterSpawnReply, error)
	Kill(ctx context.Context, in *ClusterKillReq, opts ...grpc.CallOption) (*ClusterKillReply, error)
	Poke(ctx context.Context, in *ClusterPokeReq, opts ...grpc.CallOption) (*ClusterPokeReply, error)
	Subscribe(ctx context.Context, in *ClusterSubscribeReq, opts ...grpc.CallOption) (Cluster_SubscribeClient, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Info(ctx context.Context, in *ClusterInfoReq, opts ...grpc.CallOption) (*ClusterInfoReply, error) {
	out := new(ClusterInfoReply)
	err := c.cc.Invoke(ctx, "/Cluster/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Spawn(ctx context.Context, in *ClusterSpawnReq, opts ...grpc.CallOption) (*ClusterSpawnReply, error) {
	out := new(ClusterSpawnReply)
	err := c.cc.Invoke(ctx, "/Cluster/Spawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Kill(ctx context.Context, in *ClusterKillReq, opts ...grpc.CallOption) (*ClusterKillReply, error) {
	out := new(ClusterKillReply)
	err := c.cc.Invoke(ctx, "/Cluster/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Poke(ctx context.Context, in *ClusterPokeReq, opts ...grpc.CallOption) (*ClusterPokeReply, error) {
	out := new(ClusterPokeReply)
	err := c.cc.Invoke(ctx, "/Cluster/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Subscribe(ctx context.Context, in *ClusterSubscribeReq, opts ...grpc.CallOption) (Cluster_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cluster_ServiceDesc.Streams[0], "/Cluster/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cluster_SubscribeClient interface {
	Recv() (*ClusterEvent, error)
	grpc.ClientStream
}

type clusterSubscribeClient struct {
	grpc.ClientStream
}

func (x *clusterSubscribeClient) Recv() (*ClusterEvent, error) {
	m := new(ClusterEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	Info(context.Context, *ClusterInfoReq) (*ClusterInfoReply, error)
	Spawn(context.Context, *ClusterSpawnReq) (*ClusterSpawnReply, error)
	Kill(context.Context, *ClusterKillReq) (*ClusterKillReply, error)
	Poke(context.Context, *ClusterPokeReq) (*ClusterPokeReply, error)
	Subscribe(*ClusterSubscribeReq, Cluster_SubscribeServer) error
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) Info(context.Context, *ClusterInfoReq) (*ClusterInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedClusterServer) Spawn(context.Context, *ClusterSpawnReq) (*ClusterSpawnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedClusterServer) Kill(context.Context, *ClusterKillReq) (*ClusterKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedClusterServer) Poke(context.Context, *ClusterPokeReq) (*ClusterPokeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (UnimplementedClusterServer) Subscribe(*ClusterSubscribeReq, Cluster_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Info(ctx, req.(*ClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterSpawnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Spawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Spawn(ctx, req.(*ClusterSpawnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterKillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Kill(ctx, req.(*ClusterKillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Poke(ctx, req.(*ClusterPokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterSubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterServer).Subscribe(m, &clusterSubscribeServer{stream})
}

type Cluster_SubscribeServer interface {
	Send(*ClusterEvent) error
	grpc.ServerStream
}

type clusterSubscribeServer struct {
	grpc.ServerStream
}

func (x *clusterSubscribeServer) Send(m *ClusterEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Cluster_Info_Handler,
		},
		{
			MethodName: "Spawn",
			Handler:    _Cluster_Spawn_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Cluster_Kill_Handler,
		},
		{
			MethodName: "Poke",
			Handler:    _Cluster_Poke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Cluster_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/cowait.proto",
}
