# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cowait_pb2 as cowait__pb2


class TaskStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TaskInit = channel.unary_unary(
                '/Task/TaskInit',
                request_serializer=cowait__pb2.TaskInitReq.SerializeToString,
                response_deserializer=cowait__pb2.TaskInitReply.FromString,
                )
        self.TaskFailure = channel.unary_unary(
                '/Task/TaskFailure',
                request_serializer=cowait__pb2.TaskFailureReq.SerializeToString,
                response_deserializer=cowait__pb2.TaskFailureReply.FromString,
                )
        self.TaskComplete = channel.unary_unary(
                '/Task/TaskComplete',
                request_serializer=cowait__pb2.TaskCompleteReq.SerializeToString,
                response_deserializer=cowait__pb2.TaskCompleteReply.FromString,
                )
        self.TaskLog = channel.stream_unary(
                '/Task/TaskLog',
                request_serializer=cowait__pb2.LogEntry.SerializeToString,
                response_deserializer=cowait__pb2.LogSummary.FromString,
                )


class TaskServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TaskInit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskLog(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TaskInit': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskInit,
                    request_deserializer=cowait__pb2.TaskInitReq.FromString,
                    response_serializer=cowait__pb2.TaskInitReply.SerializeToString,
            ),
            'TaskFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskFailure,
                    request_deserializer=cowait__pb2.TaskFailureReq.FromString,
                    response_serializer=cowait__pb2.TaskFailureReply.SerializeToString,
            ),
            'TaskComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskComplete,
                    request_deserializer=cowait__pb2.TaskCompleteReq.FromString,
                    response_serializer=cowait__pb2.TaskCompleteReply.SerializeToString,
            ),
            'TaskLog': grpc.stream_unary_rpc_method_handler(
                    servicer.TaskLog,
                    request_deserializer=cowait__pb2.LogEntry.FromString,
                    response_serializer=cowait__pb2.LogSummary.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Task', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Task(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TaskInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task/TaskInit',
            cowait__pb2.TaskInitReq.SerializeToString,
            cowait__pb2.TaskInitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TaskFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task/TaskFailure',
            cowait__pb2.TaskFailureReq.SerializeToString,
            cowait__pb2.TaskFailureReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TaskComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task/TaskComplete',
            cowait__pb2.TaskCompleteReq.SerializeToString,
            cowait__pb2.TaskCompleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TaskLog(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Task/TaskLog',
            cowait__pb2.LogEntry.SerializeToString,
            cowait__pb2.LogSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
